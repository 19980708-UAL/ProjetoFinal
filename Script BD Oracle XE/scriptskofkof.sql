CREATE TABLE APP_KOF.TAPR_AGE
(
  AGE_ID       NUMBER(5)                        NOT NULL,
  AGE_YEAR     NUMBER(5)                        NOT NULL,
  AGE_USR_ADD  VARCHAR2(20 BYTE),
  AGE_DTM_ADD  DATE,
  AGE_USR_UPD  VARCHAR2(20 BYTE),
  AGE_DTM_UPD  DATE
);


CREATE TABLE APP_KOF.TAPR_COUNTRY
(
  CNT_ID       NUMBER(5)                        NOT NULL,
  CNT_DESC     VARCHAR2(50 BYTE)                NOT NULL,
  CNT_USR_ADD  VARCHAR2(20 BYTE),
  CNT_DTM_ADD  DATE,
  CNT_USR_UPD  VARCHAR2(20 BYTE),
  CNT_DTM_UPD  DATE
);


CREATE TABLE APP_KOF.TAPR_SOUND
(
  SND_ID       NUMBER(10)                       NOT NULL,
  TEST_ID      NUMBER(10)                       NOT NULL,
  SND_SOUNDS   BLOB                             NOT NULL,
  SND_USR_ADD  VARCHAR2(10 BYTE)                NOT NULL,
  SND_DTM_ADD  DATE                             NOT NULL,
  SND_USR_UPD  VARCHAR2(10 BYTE)                NOT NULL,
  SND_DTM_UPD  DATE                             NOT NULL
);


CREATE TABLE APP_KOF.TAPR_TEST
(
  TEST_ID            NUMBER(10)                 NOT NULL,
  USR_ID             NUMBER(10)                 NOT NULL,
  TEST_RESULT        VARCHAR2(20 BYTE)          NOT NULL,
  TEST_TRUST_RATING  VARCHAR2(10 BYTE)          NOT NULL,
  TEST_USR_ADD       VARCHAR2(10 BYTE),
  TEST_DTM_ADD       DATE,
  TEST_USR_UPD       VARCHAR2(10 BYTE),
  TEST_DTM_UPD       DATE
);


CREATE TABLE APP_KOF.TAPR_USER
(
  USR_ID        NUMBER(10)                      NOT NULL,
  USR_USER      VARCHAR2(10 BYTE)               NOT NULL,
  USR_NAME      VARCHAR2(50 BYTE)               NOT NULL,
  USR_PASSWORD  VARCHAR2(20 BYTE)               NOT NULL,
  USR_EMAIL     VARCHAR2(30 BYTE)               NOT NULL,
  USR_AGE       NUMBER(3),
  USR_COUNTRY   NUMBER,
  USR_USR_ADD   VARCHAR2(10 BYTE),
  USR_DTM_ADD   DATE,
  USR_USR_UPD   VARCHAR2(10 BYTE),
  USR_DTM_UPD   DATE,
  AGE_ID        NUMBER(5),
  CNT_ID        NUMBER(5)
);


CREATE UNIQUE INDEX APP_KOF.TAPR_AGE_PK ON APP_KOF.TAPR_AGE
(AGE_ID)
LOGGING
TABLESPACE APP_KOF_DATA
PCTFREE    10
INITRANS   2,
MAXTRANS   255;


CREATE UNIQUE INDEX APP_KOF.TAPR_COUNTRY_PK ON APP_KOF.TAPR_COUNTRY
(CNT_ID)
LOGGING
TABLESPACE APP_KOF_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255;


CREATE UNIQUE INDEX APP_KOF.TAPR_SOUND_PK ON APP_KOF.TAPR_SOUND
(SND_ID)
LOGGING
TABLESPACE APP_KOF_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255;


CREATE UNIQUE INDEX APP_KOF.TAPR_TEST_PK ON APP_KOF.TAPR_TEST
(TEST_ID)
LOGGING
TABLESPACE APP_KOF_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255;


CREATE UNIQUE INDEX APP_KOF.TAPR_USER_PK ON APP_KOF.TAPR_USER
(USR_ID)
LOGGING
TABLESPACE APP_KOF_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255;


CREATE UNIQUE INDEX APP_KOF.UN_TEST_ID ON APP_KOF.TAPR_SOUND
(TEST_ID)
LOGGING
TABLESPACE APP_KOF_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255;


CREATE OR REPLACE TRIGGER APP_KOF.TBU_AGE
BEFORE UPDATE
ON APP_KOF.TAPR_AGE
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
   --USER HTMLDB
   IF USER in ('APEX_PUBLIC_USER','ANONYMOUS') THEN
      :new.age_usr_upd := HTMLDB_CUSTOM_AUTH.get_user;
   --SE FOR APLICACAO .NET NAO ALTERA O NEW
   ELSIF :new.age_usr_upd IS NULL THEN
      :new.age_usr_upd := USER;
   END IF;

   :new.age_dtm_upd := SYSDATE;
END;
/


CREATE OR REPLACE TRIGGER APP_KOF.TBI_AGE
BEFORE INSERT
ON APP_KOF.TAPR_AGE
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   v_recs   NUMBER (10, 0);
BEGIN
   IF :new.age_id IS NULL THEN
      SELECT seq_age.NEXTVAL
        INTO :new.age_id
        FROM DUAL;
   END IF;

   IF USER in ('APEX_PUBLIC_USER','ANONYMOUS') THEN
      :new.age_usr_add := HTMLDB_CUSTOM_AUTH.get_user;
   ELSIF :new.age_usr_add IS NULL THEN
      :new.age_usr_add := USER;
   END IF;

   :new.age_dtm_add := SYSDATE;
END;
/


CREATE OR REPLACE TRIGGER APP_KOF.TBU_CNT
BEFORE UPDATE
ON APP_KOF.TAPR_COUNTRY
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
   --USER HTMLDB
   IF USER in ('APEX_PUBLIC_USER','ANONYMOUS') THEN
      :new.cnt_usr_upd := HTMLDB_CUSTOM_AUTH.get_user;
   --SE FOR APLICACAO .NET NAO ALTERA O NEW
   ELSIF :new.cnt_usr_upd IS NULL THEN
      :new.cnt_usr_upd := USER;
   END IF;

   :new.cnt_dtm_upd := SYSDATE;
END;
/


CREATE OR REPLACE TRIGGER APP_KOF.TBI_CNT
BEFORE INSERT
ON APP_KOF.TAPR_COUNTRY
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   v_recs   NUMBER (10, 0);
BEGIN
   IF :new.cnt_id IS NULL THEN
      SELECT seq_cnt.NEXTVAL
        INTO :new.cnt_id
        FROM DUAL;
   END IF;

   IF USER in ('APEX_PUBLIC_USER','ANONYMOUS') THEN
      :new.cnt_usr_add := HTMLDB_CUSTOM_AUTH.get_user;
   ELSIF :new.cnt_usr_add IS NULL THEN
      :new.cnt_usr_add := USER;
   END IF;

   :new.cnt_dtm_add := SYSDATE;
END;
/


CREATE OR REPLACE TRIGGER APP_KOF.TBU_SND
BEFORE UPDATE
ON APP_KOF.TAPR_SOUND
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
   --USER HTMLDB
   IF USER in ('APEX_PUBLIC_USER','ANONYMOUS') THEN
      :new.snd_usr_upd := HTMLDB_CUSTOM_AUTH.get_user;
   --SE FOR APLICACAO .NET NAO ALTERA O NEW
   ELSIF :new.snd_usr_upd IS NULL THEN
      :new.snd_usr_upd := USER;
   END IF;

   :new.snd_dtm_upd := SYSDATE;
END;
/


CREATE OR REPLACE TRIGGER APP_KOF.TBI_SND
BEFORE INSERT
ON APP_KOF.TAPR_SOUND
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   v_recs   NUMBER (10, 0);
BEGIN
   IF :new.SND_ID IS NULL THEN
      SELECT seq_snd.NEXTVAL
        INTO :new.SND_ID
        FROM DUAL;
   END IF;

   IF USER in ('APEX_PUBLIC_USER','ANONYMOUS') THEN
      :new.snd_usr_add := HTMLDB_CUSTOM_AUTH.get_user;
   ELSIF :new.snd_usr_add IS NULL THEN
      :new.snd_usr_add := USER;
   END IF;

   :new.snd_dtm_add := SYSDATE;
END;
/


CREATE OR REPLACE TRIGGER APP_KOF.TBU_TES
BEFORE UPDATE
ON APP_KOF.TAPR_TEST
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
   --USER HTMLDB
   IF USER in ('APEX_PUBLIC_USER','ANONYMOUS') THEN
      :new.test_usr_upd := HTMLDB_CUSTOM_AUTH.get_user;
   --SE FOR APLICACAO .NET NAO ALTERA O NEW
   ELSIF :new.test_usr_upd IS NULL THEN
      :new.test_usr_upd := USER;
   END IF;

   :new.test_dtm_upd := SYSDATE;
END;
/


CREATE OR REPLACE TRIGGER APP_KOF.TBI_TES
BEFORE INSERT
ON APP_KOF.TAPR_TEST
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   v_recs   NUMBER (10, 0);
BEGIN
   IF :new.TEST_ID IS NULL THEN
      SELECT seq_tes.NEXTVAL
        INTO :new.TEST_ID
        FROM DUAL;
   END IF;

   IF USER in ('APEX_PUBLIC_USER','ANONYMOUS') THEN
      :new.test_usr_add := HTMLDB_CUSTOM_AUTH.get_user;
   ELSIF :new.test_usr_add IS NULL THEN
      :new.test_usr_add := USER;
   END IF;

   :new.test_dtm_add := SYSDATE;
END;
/


CREATE OR REPLACE TRIGGER APP_KOF.TBU_USR
BEFORE UPDATE
ON APP_KOF.TAPR_USER
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
   --USER HTMLDB
   IF USER in ('APEX_PUBLIC_USER','ANONYMOUS') THEN
      :new.usr_usr_upd := HTMLDB_CUSTOM_AUTH.get_user;
   --SE FOR APLICACAO .NET NAO ALTERA O NEW
   ELSIF :new.usr_usr_upd IS NULL THEN
      :new.usr_usr_upd := USER;
   END IF;

   :new.usr_dtm_upd := SYSDATE;
END;
/


CREATE OR REPLACE TRIGGER APP_KOF.TBI_USR
BEFORE INSERT
ON APP_KOF.TAPR_USER
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
   v_recs   NUMBER (10, 0);
BEGIN
   IF :new.USR_ID IS NULL THEN
      SELECT seq_usr.NEXTVAL
        INTO :new.USR_ID
        FROM DUAL;
   END IF;

   IF USER in ('APEX_PUBLIC_USER','ANONYMOUS') THEN
      :new.usr_usr_add := HTMLDB_CUSTOM_AUTH.get_user;
   ELSIF :new.usr_usr_add IS NULL THEN
      :new.usr_usr_add := USER;
   END IF;

   :new.usr_dtm_add := SYSDATE;
END;
/


ALTER TABLE APP_KOF.TAPR_AGE ADD (
  CONSTRAINT TAPR_AGE_PK
  PRIMARY KEY
  (AGE_ID)
  USING INDEX APP_KOF.TAPR_AGE_PK
  ENABLE VALIDATE);

ALTER TABLE APP_KOF.TAPR_COUNTRY ADD (
  CONSTRAINT TAPR_COUNTRY_PK
  PRIMARY KEY
  (CNT_ID)
  USING INDEX APP_KOF.TAPR_COUNTRY_PK
  ENABLE VALIDATE);

ALTER TABLE APP_KOF.TAPR_SOUND ADD (
  CONSTRAINT TAPR_SOUND_PK
  PRIMARY KEY
  (SND_ID)
  USING INDEX APP_KOF.TAPR_SOUND_PK
  ENABLE VALIDATE,
  CONSTRAINT UN_TEST_ID
  UNIQUE (TEST_ID)
  USING INDEX APP_KOF.UN_TEST_ID
  ENABLE VALIDATE);

ALTER TABLE APP_KOF.TAPR_TEST ADD (
  CONSTRAINT TAPR_TEST_PK
  PRIMARY KEY
  (TEST_ID)
  USING INDEX APP_KOF.TAPR_TEST_PK
  ENABLE VALIDATE);

ALTER TABLE APP_KOF.TAPR_USER ADD (
  CONSTRAINT TAPR_USER_PK
  PRIMARY KEY
  (USR_ID)
  USING INDEX APP_KOF.TAPR_USER_PK
  ENABLE VALIDATE);

ALTER TABLE APP_KOF.TAPR_USER ADD (
  CONSTRAINT TAPR_AGE_USER_FK 
  FOREIGN KEY (AGE_ID) 
  REFERENCES APP_KOF.TAPR_AGE (AGE_ID)
  ENABLE VALIDATE);
